什么是模式？
模式指软件设计中（在我们这里是javascript网页应用设计）经常出现问题的可重用解决方法。或者我们可以将模式看作是解决问题的模板，这些模板可以在不少不同的情况下使用。
于是，为何熟悉理解模式非常重要呢？设计模式有以下三点好处：
1.模式是可行的解决方法：它们提供实实在在的解决软件开发中问题的方法，应用可行的技术，反映创造这些模式开发者们的经验和独特观点。
2.模式很容易重用：每种模式通常代表一种通用的解决方法。这种特点使得它们适用于多种需求。
3.模式自身很有表现力：模式自身具有的结构和词汇可以优雅地描述一些较大解决方案。
模式并不是确切的解决方法。模式只给我们提供一个解决问题的框架，它并不能解决所有设计问题，也不能代替一个好的软件设计者。然而，模式确实可以帮助设计。下面，我们将介绍模式的另外一些优点。

1.重复使用模式帮助我们，在应用开发过程中，减少在意一些可能造成严重问题的细节因素。这意味着，当代码使用经过验证的模式时，我们可以少花时间操心代码结构，花更多心思研究整体解决方案的质量。这是因为设计模式鼓励我们以更有组织的方式写代码，避免以后为了整洁而重构代码。
2.模式提供一般化的解决方案，不许要和特定问题绑定。这意味着，不论是什么应用（甚至不论什么语言），设计模式都能改进代码的结构。
3.某些设计模式可以减少代码文件大小，避免重复。通过鼓励开发者仔细推敲他们的解决方案，找出能立刻减少重复的地方，例如减少功能相似的函数数量，用一个更一般的函数代替。这样整个代码库的大小就能减少。这种行为被称为让代码更加DRY。
4.模式增加了开发者的词汇量，使得相互间交流更容易。
5.模式使用多了，吸收众多开发者的经验，能得到改进并反馈回社区。有时候这样可以创造全新的设计模式，另一些时候可以得到更好的使用这些模式的方法。这样能保证基于模式的解决方案更具有普适性。

我们已经在天天使用模式了

为了理解模式为什么这么有用，让我们回顾下一个简单的jQuery元素选择问题。
假设要写这样一个脚本：让页面上每个class为foo的DOM元素计数增加1。哪种查找元素的方式最效率？这里有一些不同的方法：
1.选择页面上所有的元素并存做参考。然后过滤这个集合，使用正则表达式（或其它方式）找出class为foo的元素。
2.用浏览器本地功能，例如querySelectorAll()来选择class为foo的所有元素。
3.用getElementsByClassName()。

那么，哪种方法最快呢？选项3比其它方法快8-10倍。但实际上，2和3在IE9以下的版本都不起作用，只能用1。

使用jQuery的开发者就不需要操心这个问题，因为jQuery已经用Facade（外观）模式将问题抽象了。详细的以后讨论，这种模式提供一个简单接口（如$el.css(),$el.animate()），抽象了一些复杂细节代码。这意味着我们可以少花时间关注执行细节。

在我们看不到的地方，库函数根据浏览器决定最优方案，我们只需要使用抽象出来的那一层。

我们可能同样熟悉jQuery的$("selector")。这比手动使用getElementById(),getElementsByClassName(),getElementByTagName()等等选择HTML元素更容易。
尽管我们知道querySelectorAll()也能尝试解决这个问题，但还是比不上用jQuery的Facade接口和手动选取最优路径。用模式来抽象具有实际价值。

今后我们将探讨各种各样的设计模式。
